@inject IJSRuntime JSRuntime

<button @onclick="QrScanner" value="StartCamera">Start Camera</button>

<video id="qrVideo" class="qr-video @_currentClass" style="animation-duration: @(FadeTime)ms"></video>

@code {
    private const string HideCss = "display-none";
    private const string EnterCss = "enterUp";
    private const string ExitCss = "exitDown";

    private string _currentClass = HideCss;

    private string? _qrCode = null;

    [Parameter]
    public int FadeTime { get; set; } = 500;

    [Parameter]
    public EventCallback<string> OnCodeScanned { get; set; }

    private async Task QrScanner()
    {
        // Animate entrance and create Scanner Instance and await a code
        _currentClass = EnterCss;
        _qrCode = await CreateQrScanner();
        
        OnCodeScanned.InvokeAsync(_qrCode);

        // Animate exit and wait for animation to finish
        _currentClass = ExitCss;
        await Task.Delay(50000);

        // Destroy QR Scanner
        await DestroyQrScanner();
    }

    private ValueTask<String> CreateQrScanner()
    {
        return JSRuntime.InvokeAsync<String>(
            "Main.QrScanner.StartQrScanner",
            "qrVideo");
    }

    private ValueTask<String> DestroyQrScanner()
    {
        return JSRuntime.InvokeAsync<String>(
            "Main.QrScanner.DestroyQrScanner",
            "qrVideo");
    }

    [JSInvokable]
    public void ReturnQrCode(string data)
    {
        _qrCode = data;
    }
}
