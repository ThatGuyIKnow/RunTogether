@page "/DataTable"
@using Microsoft.EntityFrameworkCore
@using System.Collections.Generic
@using RunTogether.Data
@using RunTogether.Pages
@using Microsoft.AspNetCore.Identity
@using RunTogether.Areas.Identity.Helpers
@using RunTogether.Areas.Identity

@inject ApplicationDbContext dbContext
@inject UserManager<ApplicationUser> userManager
@inject DialogService dialogService

<h3>DataTable</h3>

<RadzenButton Text=@($"Show simple dialog") Click="@ShowSimpleDialog" />

<RadzenGrid @ref="table" Data="@runs" AllowFiltering="true" AllowSorting="true" TItem="Run" RowSelect="@(args => fuckvs(args))">
    <Columns>
        <RadzenGridColumn TItem="Run" Property="ID" Title="ID"></RadzenGridColumn>
        <RadzenGridColumn TItem="Run" Property="StartDate" Title="Start Date"></RadzenGridColumn>
        <RadzenGridColumn TItem="Run" Property="EndDate" Title="End Date"></RadzenGridColumn>
        <RadzenGridColumn TItem="Run" Property="Route" Title="Route"></RadzenGridColumn>
    </Columns>
</RadzenGrid>

<RadzenTabs>
    <Tabs>
        <RadzenTabsItem Text="Order Details">
            <RadzenGrid AllowFiltering="true" AllowPaging="true" AllowSorting="true" Data="@runners" TItem="ApplicationUser">
                <Columns>
                    <RadzenGridColumn TItem="ApplicationUser" Property="runners.FirstName" Title="Unit Price" />
                </Columns>
            </RadzenGrid>
        </RadzenTabsItem>
        <RadzenTabsItem Text="Products">
            <RadzenDataList WrapItems="true" AllowPaging="true" Data="@runs" TItem="Run" PageSize="10">
                <Template Context="detail">
                    <RadzenCard Style="width:100px;height:100px">
                        Product:
                        <b>@detail?.ID</b>
                    </RadzenCard>
                </Template>
            </RadzenDataList>
        </RadzenTabsItem>
    </Tabs>
</RadzenTabs>





@code {

    Run run = new Run();

    RadzenGrid<Run> table;

    IQueryable<Run> runs;

    List<ApplicationUser> runners; 

    protected override void OnInitialized()
    {

        runs = dbContext.Runs;
        var test = new UserCreationHelper(  userManager, dbContext);
        test.CreateRunner("Frederik", "Deiborg", "hej@gmail.com", runs.First());

    }

    public void fuckvs(Run args)
    {
        run = args;
        runners = dbContext.Users
            .Where(u => u.RunId == run.ID)
            .ToList();

        foreach (var runner in runners)
        {

            Console.WriteLine(runner);

        }
    }

    async Task ShowSimpleDialog() => await dialogService.OpenAsync("Simple Dialog", ds =>
    @<RadzenTemplateForm TItem="Run" Data="@run" Submit="()=> OnSubmit(run.StartDate, run.EndDate)" InvalidSubmit="()=> OnInvalidSubmit()">

        <div class="row" style="margin-bottom: 48px">
            <div class="col-md-4 align-right">
                <RadzenLabel Text="Start date" />
            </div>
            <div class="col">
                <RadzenDatePicker Name="StartDate" DateFormat="d" @bind-Value="run.StartDate" /><br>
                <RadzenRequiredValidator Component="StartDate" Text="Start date is required" Popup=true Style="position: absolute" />
            </div>
        </div>

        <div class="row" style="margin-bottom: 48px">
            <div class="col-md-4 align-right">
                <RadzenLabel Text="End date" />
            </div>
            <div class="col">
                <RadzenDatePicker Name="EndDate" DateFormat="d" @bind-Value="run.EndDate" /><br>
                <RadzenRequiredValidator Component="EndDate" Text="End date is required" Popup=true Style="position: absolute" />
            </div>
        </div>

        <div class="row">
            <div class="col-md-12">
                <RadzenButton ButtonType="ButtonType.Submit" Text="OK" Style="margin-bottom: 10px; width: 150px" />
                <RadzenButton Click="()=> ds.Close(false)" ButtonStyle="ButtonStyle.Secondary" Text="Cancel" Style="margin-bottom: 10px; width: 150px" />
            </div>
        </div>
    </RadzenTemplateForm>
    );


    public void OnSubmit(DateTime Start, DateTime End)
    {
        Run RunObj = new Run() { StartDate = Start, EndDate = End };
        Console.WriteLine("YEY!");
        this.dialogService.Close(true);
        dbContext.Runs.Add(RunObj);
        dbContext.SaveChanges();
        table.Reload();

    }

    void OnInvalidSubmit()
    {
        Console.WriteLine("AW");
    }

}
