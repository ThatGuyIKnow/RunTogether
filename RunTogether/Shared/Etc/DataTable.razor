@page "/DataTable"
@using Microsoft.EntityFrameworkCore
@using System.Collections.Generic
@using RunTogether.Data
@using RunTogether.Pages
@using Microsoft.AspNetCore.Identity
@using RunTogether.Areas.Identity.Helpers
@using RunTogether.Areas.Identity
@using RunTogether.Shared.QR

@inject IJSRuntime jsRuntime
@inject ApplicationDbContext dbContext
@inject UserManager<ApplicationUser> userManager
@inject DialogService dialogService


<RadzenButton Text=@($"Opret nyt løb") Click="@ShowSimpleDialog" />
<div class="row">
    <div class="col-md-6">
        <RadzenGrid @ref="table" Data="@runs" AllowFiltering="true" AllowSorting="true" TItem="Run" RowSelect="@(args => QueryForRunners(args))">
            <Columns>
                <RadzenGridColumn TItem="Run" Property="Name" Title="Løb"></RadzenGridColumn>
                <RadzenGridColumn TItem="Run" Property="StartDate" Title="Start Dato"></RadzenGridColumn>
                <RadzenGridColumn TItem="Run" Property="EndDate" Title="Slut Dato"></RadzenGridColumn>
                <RadzenGridColumn TItem="Run" Property="Route" Title="Rute"></RadzenGridColumn>
                <RadzenGridColumn TItem="Run" Property="QRString" Title="QR Kode"></RadzenGridColumn>
            </Columns>
        </RadzenGrid>
    </div>
    <div class="col-md-6">
        <RadzenTabs>
            <Tabs>
                <RadzenTabsItem Text="Runners">
                    <RadzenGrid AllowFiltering="true" AllowPaging="true" AllowSorting="true" Data="@runners" TItem="ApplicationUser">
                        <Columns>
                            <RadzenGridColumn TItem="ApplicationUser" Property="runners.FirstName" Title="Fornavn" />
                            <RadzenGridColumn TItem="ApplicationUser" Property="runners.LastName" Title="Efternavn" />
                            <RadzenGridColumn TItem="ApplicationUser" Property="runners.Email" Title="Email" />
                        </Columns>
                    </RadzenGrid>
                </RadzenTabsItem>

                <RadzenTabsItem Text="Route">
                    <RadzenDataList WrapItems="true" AllowPaging="true" Data="@runners" TItem="ApplicationUser" PageSize="10">
                        <Template Context="detail">
                            <RadzenCard Style="width:100px;height:100px">
                                Product:
                                <b>@detail?.Email</b>
                            </RadzenCard>
                        </Template>
                    </RadzenDataList>
                </RadzenTabsItem>

                <RadzenTabsItem Text="QR Kode">
                    <div>
                        <RadzenButton Click="@((args) => PrintImage())" Text="print billede" Style="margin-bottom: 20px; width: 150px" />
                      
                        <RadzenDropDown @bind-Value="color" AllowClear="true" TValue="string" Data="@colorList" TextProperty="Name" ValueProperty="code" Style="margin-bottom: 20px" />

                        <RadzenSlider @bind-Value="slider" TValue="int" Min="0" Max="100" Style="margin-bottom: 20px;" />

                        <QRGenerator code="@QRString" size=@($"{slider}%") color="@color" />
                    </div>               
                </RadzenTabsItem>
            </Tabs>
        </RadzenTabs>
    </div>
</div>

@code {

    void PrintImage()
    {
        jsRuntime.InvokeVoidAsync("Main.Common.PrintImage", "QRCodeImg");
    }


    public class Farver
    {
        public string Name { get; set; }
        public string code { get; set; }
    }

    List<Farver> colorList = new List<Farver>();

    //Variabler for QRCode gen
    string color = "#000000";
    int slider = 50;
    private string QRString = default;

    //Delecare variable for referencing radzen table (@ref="table") as RadzenGrid of type Run 
    RadzenGrid<Run> table;

    //henter hele data table ned og filtere client-side, men der laves ingen filtering her, så det er fint.
    IEnumerable<Run> runs;

    //alt querying bliver lavet i DB og kun det relevante data sendes til client.
    IQueryable<ApplicationUser> runners;


    protected override async Task OnInitializedAsync()
    {
        runs = dbContext.Runs;
        var test = new UserCreationHelper(userManager, dbContext);

        colorList.Add(new Farver() { Name = "RT rød", code = "#cc4545" });
        colorList.Add(new Farver() { Name = "Sort", code = "#000000" });

        //dbContext.Runs.Add(new Run { Name = "Løb 1", StartDate = DateTime.Now, EndDate = DateTime.Now.AddDays(1), QRString = "test code" });
        //dbContext.Runs.Add(new Run { Name = "Løb 2", StartDate = DateTime.Now.AddDays(2), EndDate = DateTime.Now.AddDays(3), QRString = "ajuf_££$dafdf" });
        //dbContext.Runs.Add(new Run { Name = "Løb 3", StartDate = DateTime.Now.AddDays(4), EndDate = DateTime.Now.AddDays(5), QRString = "asdafgds" });
        //dbContext.SaveChanges();
        //await test.CreateRunner("Frederik", "Deiborg", "HejMedDig@gmail.com", runs.ElementAt(0));
        //await test.CreateRunner("Oliver", "Hansen", "Coolguy@gmail.com", runs.ElementAt(0));
        //await test.CreateRunner("Kurt", "C.Kode", "CisGod@gmail.com", runs.ElementAt(1));
        //await test.CreateRunner("Mads", "Madsen", "SejtNavnGod@gmail.com", runs.ElementAt(1));
        //await test.CreateRunner("Ran", "D.Om", "RandomMaild@gmail.com", runs.ElementAt(1));
        //await test.CreateRunner("All", "Alone", "Lonely@gmail.com", runs.ElementAt(2));
    }

    public void QueryForRunners(Run QueryRun)
    {
        QRString = QueryRun.QRString;

        runners = dbContext.Users
            .Where(u => u.RunId == QueryRun.ID);
    }

    //Code for create Run dialog. 
    Run run = new Run();

    async Task ShowSimpleDialog() => await dialogService.OpenAsync("Simple Dialog", ds =>
    @<RadzenTemplateForm TItem="Run" Data="@run" Submit="()=> OnSubmit(run.Name, run.StartDate, run.EndDate, run.QRString)" InvalidSubmit="()=> OnInvalidSubmit()">

    <div class="row" style="margin-bottom: 48px">
        <div class="col-md-4 align-right">
            <RadzenLabel Text="Løb navn" />
        </div>
        <div class="col">
            <RadzenTextBox Name="Name" @bind-Value="run.Name" /><br>
            <RadzenRequiredValidator Component="Name" Text="Navn skal udfyldes" Popup=true Style="position: absolute" />
        </div>
    </div>

    <div class="row" style="margin-bottom: 48px">
        <div class="col-md-4 align-right">
            <RadzenLabel Text="Start dato" />
        </div>
        <div class="col">
            <RadzenDatePicker Name="StartDate" DateFormat="d" @bind-Value="run.StartDate" /><br>
            <RadzenRequiredValidator Component="StartDate" Text="Start dato skal udfyldes" Popup=true Style="position: absolute" />
        </div>
    </div>

    <div class="row" style="margin-bottom: 48px">
        <div class="col-md-4 align-right">
            <RadzenLabel Text="Slut dato" />
        </div>
        <div class="col">
            <RadzenDatePicker Name="EndDate" DateFormat="d" @bind-Value="run.EndDate" /><br>
            <RadzenRequiredValidator Component="EndDate" Text="Slut dato skal udfyldes" Popup=true Style="position: absolute" />
        </div>
    </div>

    <div class="row" style="margin-bottom: 48px">
        <div class="col-md-4 align-right">
            <RadzenLabel Text="QR Kode" />
        </div>
        <div class="col">
            <RadzenTextBox Name="QRString" @bind-Value="run.QRString" /><br>
            <RadzenRequiredValidator Component="QRString" Text="QR Kode skal udfyldes" Popup=true Style="position: absolute" />
        </div>
    </div>

    <div class="row">
        <div class="col-md-12">
            <RadzenButton ButtonType="ButtonType.Submit" Text="OK" Style="margin-bottom: 10px; width: 150px" />
            <RadzenButton Click="()=> ds.Close(false)" ButtonStyle="ButtonStyle.Secondary" Text="Cancel" Style="margin-bottom: 10px; width: 150px" />
        </div>
    </div>
</RadzenTemplateForm>
    );


    public void OnSubmit(String RunName, DateTime Start, DateTime End, String QR)
    {
        Run RunObj = new Run() {Name = RunName, StartDate = Start, EndDate = End, QRString = QR };
        Console.WriteLine("YEY!");
        this.dialogService.Close(true);
        dbContext.Runs.Add(RunObj);
        dbContext.SaveChanges();
        table.Reload();

    }

    void OnInvalidSubmit()
    {
        Console.WriteLine("AW");
    }

}
